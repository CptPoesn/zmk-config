#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT  0
#define LOWER    1
#define RAISE    2
#define ADJUST   3
#define GAME     4
#define ONEHAND  5
#define ONENUM   6
#define ONEPAR   7
#define ONEMED   8
#define ONEPUNC  9
#define ONEMOUSE 10
#define ONEARR   11
#define ONEF     12

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <175>;
    quick-tap-ms = <175>;
};

 / {


    combos {
        compatible = "zmk,combos";
        combo_tog_one_hand {
            timeout-ms = <50>;
            key-positions = <10 11 12 13>;
			layers = <1>;
            bindings = <&tog ONEHAND>;
        };
		
		
        combo_space {
            timeout-ms = <50>;
            key-positions = <10 11 12 13>;
			layers = <5>;
            bindings = <&kp SPC>;
        };
		
        combo_f {
            timeout-ms = <50>;
            key-positions = <2 3>;
			layers = <5>;
            bindings = <&kp F>;
        };
		
        combo_g {
            timeout-ms = <50>;
            key-positions = <1 2>;
			layers = <5>;
            bindings = <&kp G>;
        };
		
        combo_j {
            timeout-ms = <50>;
            key-positions = <0 1>;
			layers = <5>;
            bindings = <&kp J>;
        };
		
        combo_y {
            timeout-ms = <50>;
            key-positions = <1 3>;
			layers = <5>;
            bindings = <&kp Y>;
        };
		
        combo_v {
            timeout-ms = <50>;
            key-positions = <0 2>;
			layers = <5>;
            bindings = <&kp V>;
        };
		
        combo_w {
            timeout-ms = <50>;
            key-positions = <0 3>;
			layers = <5>;
            bindings = <&kp W>;
        };
		
        combo_d {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
			layers = <5>;
            bindings = <&kp D>;
        };
		
        combo_x {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
			layers = <5>;
            bindings = <&kp X>;
        };
		
        combo_q {
            timeout-ms = <50>;
            key-positions = <0 1 3>;
			layers = <5>;
            bindings = <&kp Q>;
        };
		
        combo_z {
            timeout-ms = <50>;
            key-positions = <0 1 2 3>;
			layers = <5>;
            bindings = <&kp Z>;
        };
		
        combo_c {
            timeout-ms = <50>;
            key-positions = <12 13>;
			layers = <5>;
            bindings = <&kp C>;
        };
		
        combo_u {
            timeout-ms = <50>;
            key-positions = <11 12>;
			layers = <5>;
            bindings = <&kp U>;
        };
		
        combo_h {
            timeout-ms = <50>;
            key-positions = <11 13>;
			layers = <5>;
            bindings = <&kp H>;
        };
		
        combo_k {
            timeout-ms = <50>;
            key-positions = <10 12>;
			layers = <5>;
            bindings = <&kp K>;
        };
		
        combo_b {
            timeout-ms = <50>;
            key-positions = <10 13>;
			layers = <5>;
            bindings = <&kp B>;
        };
		
        combo_l {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
			layers = <5>;
            bindings = <&kp L>;
        };
		
        combo_m {
            timeout-ms = <50>;
            key-positions = <10 11 12>;
			layers = <5>;
            bindings = <&kp M>;
        };
		
        combo_p {
            timeout-ms = <50>;
            key-positions = <10 11 13>;
			layers = <5>;
            bindings = <&kp P>;
        };
		
		
		
		
		
        combo_comma {
            timeout-ms = <50>;
            key-positions = <3 12>;
			layers = <5>;
            bindings = <&kp COMMA>;
        };
		
        combo_period {
            timeout-ms = <50>;
            key-positions = <3 11>;
			layers = <5>;
            bindings = <&kp PERIOD>;
        };
		
        combo_slash {
            timeout-ms = <50>;
            key-positions = <3 10>;
			layers = <5>;
            bindings = <&kp SLASH>;
        };
		
        combo_single_quote {
            timeout-ms = <50>;
            key-positions = <3 11 12>;
			layers = <5>;
            bindings = <&kp SINGLE_QUOTE>;
        };
		
        combo_ESC {
            timeout-ms = <50>;
            key-positions = <2 3 10>;
			layers = <5>;
            bindings = <&kp ESC>;
        };
		
        combo_TAB {
            timeout-ms = <50>;
            key-positions = <1 2 3 10>;
			layers = <5>;
            bindings = <&kp TAB>;
        };
		
        combo_BkSpc {
            timeout-ms = <50>;
            key-positions = <2 13>;
			layers = <5>;
            bindings = <&kp BSPC>;
        };
		
        combo_CTRL {
            timeout-ms = <50>;
            key-positions = <0 13>;
			layers = <5>;
            bindings = <&sk LCTRL>;
        };
		
        combo_GUI {
            timeout-ms = <50>;
            key-positions = <0 12>;
			layers = <5>;
            bindings = <&sk LGUI>;
        };
		
        combo_alt {
            timeout-ms = <50>;
            key-positions = <0 11>;
			layers = <5>;
            bindings = <&sk LALT>;
        };
    };
	
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <1 10>;
			layers = <5>;
            bindings = <&kp SEMICOLON>;
        };
		
        combo_colon {
            timeout-ms = <50>;
            key-positions = <2 10>;
			layers = <5>;
            bindings = <&kp COLON>;
        };
		
        combo_question {
            timeout-ms = <50>;
            key-positions = <1 3 10>;
			layers = <5>;
            bindings = <&kp QUESTION>;
        };
		
        combo_double_quote {
            timeout-ms = <50>;
            key-positions = <3 12 13>;
			layers = <5>;
            bindings = <&kp DOUBLE_QUOTES>;
        };
		
        combo_EXCLAMATION {
            timeout-ms = <50>;
            key-positions = <1 12>;
			layers = <5>;
            bindings = <&kp EXCLAMATION>;
        };
		
        combo_TAB {
            timeout-ms = <50>;
            key-positions = <1 2 3 10>;
			layers = <5>;
            bindings = <&kp TAB>;
        };
		
        combo_ENTER {
            timeout-ms = <50>;
            key-positions = <3 13>;
			layers = <5>;
            bindings = <&kp ENTER>;
        };
		
        combo_SHIFT {
            timeout-ms = <50>;
            key-positions = <0 1 2 13>;
			layers = <5>;
            bindings = <&sk LSHIFT>;
        };
		
        combo_lock_SHIFT {
            timeout-ms = <50>;
            key-positions = <2 12>;
			layers = <5>;
            bindings = <&sk LGUI>;
        };

    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q           &kp W       &kp F       &kp P       &kp G           &kp J           &kp L       &kp U       &kp Y       &kp SEMI
            &kp A           &mt LALT R  &mt LGUI S  &mt LCTRL T &kp D           &kp H           &mt LCTRL N &mt LGUI E  &mt LALT I  &kp O 
            &kp Z           &kp X       &kp C       &kp V       &kp B           &kp K           &kp M       &kp COMMA   &kp DOT     &kp FSLH
                                                    &mo LOWER   &mt LSHIFT BSPC &kp SPC         &mo RAISE
            >;
        };

		lower_layer {
		                          bindings = <                                 
		     &kp ESC        &kp DQT     &kp SQT     &kp AMPS    &kp DLLR        &kp AT          &kp N7      &kp N8      &kp N9 &kp PLUS 
		     &kp TAB        &kp PIPE    &kp CARET   &kp EXCL    &kp UNDER       &kp RET         &kp N4      &kp N5      &kp N6 &kp MINUS 
		     &kp GRAVE      &kp BSLH    &kp PRCNT   &kp EQUAL   &kp TILDE       &kp POUND       &kp N1      &kp N2      &kp N3 &kp ASTRK
		                            	            &trans      &bootloader     &kp N0          &mo ADJUST  
		        >;
		};
						   
		raise_layer {
		                          bindings = <                                 
		     &mwh SCROLL_DOWN &mwh SCROLL_LEFT &mmv MOVE_UP   &mwh SCROLL_RIGHT &kp LBRC         &kp RBRC         &kp LC(LEFT) &kp LC(DOWN) &kp LC(UP)   &kp LC(RIGHT)
		     &mwh SCROLL_UP   &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &kp LPAR         &kp RPAR         &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT
		     &kp  C_MUTE      &mkp MCLK         &mkp RCLK       &mkp LCLK         &kp LBKT         &kp RBKT         &kp C_PREV   &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT 
		                            	                      &mo ADJUST        &kp C_PLAY_PAUSE &bootloader   &trans 
		        >;
		};
	

		adjust_layer {
		                          bindings = <                                 
		     &kp F1      &kp F2    &kp F3    &kp F4  &none      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 
		     &kp F5      &kp F6    &kp F7    &kp F8  &none      &bt BT_SEL 0 &none        &none        &none        &none 
		     &kp F9      &kp F10   &kp F11   &kp F12 &none      &bt BT_CLR   &none        &none        &none        &tog GAME
		                            	     &trans  &none      &none        &trans  
		        >;
		};	 
		
		game_layer {
		                          bindings = <                                 
		     &kp ESC    &kp Q  &kp W   &kp E      &kp R       &kp I           &kp O       &kp UP      &kp N9    &kp BSPC 
		     &kp TAB    &kp A  &kp S   &kp D      &kp F       &kp RET         &kp LEFT    &kp DOWN    &kp RIGHT &kp RET 
		     &kp LCTRL  &kp Z  &kp X   &kp C      &kp V       &kp POUND       &kp N1      &kp N2      &kp N3    &tog GAME
		                               &kp CAPS   &kp SPACE   &none           &none  
		                           >;
					
        };
						   
		one_hand_layer {
		                          bindings = <                                 
		     &kp O        &kp I  &kp E   &kp N      &none       &none        &none    &none    &none &none
		     &kp A        &kp R  &kp S   &kp T      &none       &none        &none    &none    &none &none
		     &tog ONEHAND &none  &none   &none      &none       &none        &none    &none    &none &none
		                               &none      &kp SPACE   &none        &none  
		                           >;
					
        };



    };
};
